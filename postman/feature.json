{
  "info": {
    "_postman_id": "05c02716-2aec-4083-9d65-db6e3e8a4dde",
    "name": "Test Explore With Me - Feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "22528448"
  },
  "item": [
    {
      "name": "Create ownerEvent",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Test json value\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id).to.eql(1);\r",
              "    pm.expect(jsonData.name).to.eql('ownerEvent');\r",
              "    pm.expect(jsonData.email).to.eql('ownerEvent@mail.ru');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"name\": \"ownerEvent\",\r\n  \"email\": \"ownerEvent@mail.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create commentator",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Test json value\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id).to.eql(2);\r",
              "    pm.expect(jsonData.name).to.eql('commentator');\r",
              "    pm.expect(jsonData.email).to.eql('commentator@mail.ru');\r",
              "\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"name\": \"commentator\",\r\n  \"email\": \"commentator@mail.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create user 3",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Test json value\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id).to.eql(3);\r",
              "    pm.expect(jsonData.name).to.eql('user without comments');\r",
              "    pm.expect(jsonData.email).to.eql('qwwerty@mail.ru');\r",
              "\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"name\": \"user without comments\",\r\n  \"email\": \"qwwerty@mail.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create category",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Your test name\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id).to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"name\": \"category 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/categories",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "categories"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create event1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "events"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create event2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"annotation\": \"Охота на пиратов\",\r\n  \"category\": 1,\r\n  \"description\": \"Охота на пиратов в тихом океане\",\r\n  \"eventDate\": \"2028-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "events"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Publish event1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/events/1/publish",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            "1",
            "publish"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add comment to event 1 user 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Status должен быть в ожидании\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.state).to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment from owner 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add comment 2 to event 1 user 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Status должен быть в ожидании\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.state).to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment2 from owner 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add comment 3 to event 1 user 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Status должен быть в ожидании\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.state).to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment3 from owner 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add comment 4 to event 1 user 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Status должен быть в ожидании\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.state).to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment4 from owner 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add comment 1 to event 1 user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Status должен быть в ожидании\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.state).to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment1 from commentator\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/2/comments/?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add comment 2 to event 1 user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Status должен быть в ожидании\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.state).to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment2 from commentator\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/2/comments/?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add comment 3 to event 1 user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Status должен быть в ожидании\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.state).to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment3 from commentator\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/2/comments/?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add comment 4 to event 1 user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Status должен быть в ожидании\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.state).to.eql('PENDING');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment4 from commentator\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/2/comments/?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add invaild comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
              "pm.expect(target).to.have.property('status');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \" \"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add comment to not publish event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(403);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment2 from owner 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/?eventId=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            ""
          ],
          "query": [
            {
              "key": "eventId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update not publish comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.test(\"Status должен быть -в ожидании\", function () {\r",
              "        var jsonData = pm.response.json();\r",
              "        pm.expect(jsonData.state).to.eql('PENDING');\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"update comment from owner 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update comment notValid user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(403);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"update comment from commentator2\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/2/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Publish comment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.test(\"Status должен быть -опубликован\", function () {\r",
              "        var jsonData = pm.response.json();\r",
              "        pm.expect(jsonData.state).to.eql('PUBLISHED');\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/1/publish",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "1",
            "publish"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Cancel published comment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(403);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/1/cancel",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            "1",
            "cancel"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update published comment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(403);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"update comment from owner 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Publish not found comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/122/publish",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "122",
            "publish"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Reject publish comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(403);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/1/reject",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "1",
            "reject"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Cancel comment 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.test(\"Status должен быть -отменен\", function () {\r",
              "        var jsonData = pm.response.json();\r",
              "        pm.expect(jsonData.state).to.eql('CANCELED');\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/2/cancel",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            "2",
            "cancel"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Publish cancelled comment 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(403);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/2/publish",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "2",
            "publish"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Fixed admin comment 3",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.test(\"Status должен быть-опубликован администратором c правками\", function () {\r",
              "        var jsonData = pm.response.json();\r",
              "        pm.expect(jsonData.state).to.eql('PUBLISHED_WITH_EDITS_ADMIN');\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment3 from admin\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/comments/3",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "3"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Fixed admin published comment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(403);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"comment3 from admin\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Reject with reason comment 4",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.test(\"Status должен быть-отклонено с указанием причины\", function () {\r",
              "        var jsonData = pm.response.json();\r",
              "        pm.expect(jsonData.state).to.eql('REJECTED');\r",
              "        pm.expect(jsonData.rejectReason).to.eql('Нарушение правил сайта');\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/4/reject?reason=Нарушение правил сайта",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "4",
            "reject"
          ],
          "query": [
            {
              "key": "reason",
              "value": "Нарушение правил сайта"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update rejected comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.test(\"Status должен быть-в ожидании. Причина отказа должна остаться\", function () {\r",
              "        var jsonData = pm.response.json();\r",
              "        pm.expect(jsonData.state).to.eql('PENDING');\r",
              "        pm.expect(jsonData.rejectReason).to.eql('Нарушение правил сайта');\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"update comment 4 after reject from owner 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/4",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            "4"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Private Get commentator comments with correct id(no params))",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(4);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/2/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Private Get commentator comments with correct id(with params))",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(2);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/2/comments?size=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments"
          ],
          "query": [
            {
              "key": "size",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Private Get user comments without comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/3/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "3",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Private Get user comment by ID correct",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Тест должен возвращать корректный id\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.id).to.eql(6);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/2/comments/6",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments",
            "6"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Private Get user comment by ID incorrect commentId",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/2/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Admin get comments without params",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(8);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Admin get comments withparams(only user 1)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(4);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?users=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "users",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Admin get comments withparams(only user 2)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(4);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?users=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "users",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Admin get comments withparams(only user 1 and user 2)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(8);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?users=1,2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "users",
              "value": "1,2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Admin get comments withparams(only PUBLISHED)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?states=PUBLISHED",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "states",
              "value": "PUBLISHED"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Admin get comments withparams(only PUBLISHED, PUBLISHED_WITH_EDITS_ADMIN)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(2);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?states=PUBLISHED, PUBLISHED_WITH_EDITS_ADMIN",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "states",
              "value": "PUBLISHED, PUBLISHED_WITH_EDITS_ADMIN"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Admin get comments withparams(only event2 without comments)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?events=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "events",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Admin get comments withparams(event 1, event2)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(8);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?events=1,2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "events",
              "value": "1,2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Public get comments for event 1(Only publishing comment excepted)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Размер списка должен соответствовать ожидаемому\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length).to.eql(2);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/1/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "1",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Public get comments for event 2(without comments)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/2/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "2",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Public get comment with id 1(Publishing)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.test(\"Status должен быть -опубликован\", function () {\r",
              "        var jsonData = pm.response.json();\r",
              "        pm.expect(jsonData.state).to.eql('PUBLISHED');\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/1/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "1",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Public get comment with id 1(Publishing with edits admin)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.test(\"Status должен быть -опубликован с правками администратора\", function () {\r",
              "        var jsonData = pm.response.json();\r",
              "        pm.expect(jsonData.state).to.eql('PUBLISHED_WITH_EDITS_ADMIN');\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/1/comments/3",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "1",
            "comments",
            "3"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Public get comment with id 2(Not Publishing)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/1/comments/2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "1",
            "comments",
            "2"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}